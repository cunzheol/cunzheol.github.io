<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>存折</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-04T00:34:23.859Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>存折</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浮点型数据在内存中的存储</title>
    <link href="http://example.com/year/06/03/%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/year/06/03/%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</id>
    <published>2024-06-03T13:58:00.000Z</published>
    <updated>2024-06-04T00:34:23.859Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="number">9</span>;</span><br><span class="line">    <span class="type">float</span> *pFloat =(<span class="type">float</span>*)&amp;n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n的值为:%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为:%f\n&quot;</span>,*pFloat);</span><br><span class="line">    </span><br><span class="line">    *pFloat=<span class="number">9.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值为:%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为:%f\n&quot;</span>,*pFloat);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考下这段代码输出的值是什么？</p><img src="/year/06/03/%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/print.png" class title="This is an example image"><p>可能你会感到好奇：</p><p>我明明&amp;n后强转成了float类型，为什么还会输出0.000000呢？</p><p>为什么* pFloat&#x3D;9.0，以%d的形式输出会得到这么大的一个数呢？</p><p>别急，我慢慢解释。</p><p>首先我们需要知道浮点型的数据在内存中是如何存储的。</p><p>浮点型的数据是根据国际标准“IEEE 754”来存储的，标准规定：每个浮点数V&#x3D;(-1)^S* M*2^E</p><p>当S&#x3D;0时，浮点数为正数</p><p>当S&#x3D;1时，浮点数为负数</p><p>那么M与E又代表什么意思呢？</p><p>假设我们有一个浮点数“5.5”，把它转换成二进制的形式就是：101.1，此时它的S&#x3D;0，M&#x3D;1.01，E&#x3D;2。</p><p>（就好比科学计数法，5500&#x3D;5.5*10^3，只不过浮点型V&#x3D;(-1)^S * M * 2^E是把科学计数法的10换成了2。）</p><p>回到正题，M就是将浮点数转换成二进制再转换成类似于科学计数法的形式时，5.5的部分，E就是小数点的位移量，</p><p>同时，计算机又根据32为浮点型(float)与64位浮点型(double)将存储方式分类两类：</p><p>32位浮点型：第一位位符号位（s）,往后8 bit表示E，剩下23 Bit表示M</p><img src="/year/06/03/%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/32.png" class title="This is an example image"><p>64位浮点型：第一位表示符号位,往后11 bit表示E，剩下52 bit表示M。</p><img src="/year/06/03/%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/64.png" class title="This is an example image"><p><strong>关于M:</strong></p><p>M，的取值范围：M大于等于1，小于2。</p><p>也就是说，M是默认存在一个1的，所以，为了节省一位有效数字，我们在把M存储到内存中时，只会存储小数部分，当要使用该浮点型的数时，提取M，只需要在前面加上一个1就行。假设是一个32位的浮点数，以这样的方式存储，原本只能存放23位有效数字，现在就能存放24位有效数字了（存放到内存中的小数部分（23位）与默认的1，一共24位）</p><p><strong>关于E:</strong></p><p>上面我们说到，V的公式类似于科学计数法，但是在科学计数法里，E的值可以为负数；但是在V公式中，E是一个无符号整型，它只能为正数，所以，为了防止出现负数的情况，在计算机把E存入到内存中时，会让E加上一个中间值。</p><p>32位的浮点型中间值为127</p><p>64位的浮点型中间值为1023</p><p>比如上面提到的V&#x3D;5.5&#x3D;101.1&#x3D;(-1)^0* M *2^2;</p><p>E&#x3D;2，加上中间值&#x3D;129，再转换成二进制形式：1000 0001。</p><p>如果要取出来，也很简单，让E减去中间值就行了。</p><p>但是在提取E时，会出现三种情况：</p><ul><li>E全为0的情况</li><li>E全为1的情况</li><li>E不是全为1也不是全为0的情况（正常情况）</li></ul><p><strong>E全为0的情况</strong>：（假设是32位浮点数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s: <span class="number">0</span>  E: <span class="number">00000000</span>  M: <span class="number">00000000000000000000000</span></span><br></pre></td></tr></table></figure><p>此时E是存储在内存中的，E&#x3D;0，我们知道E存储到内存中时要加上中间值，前面已经知道了32位浮点数的中间值是127，当E为多少时，加上中间值会等于0？答案是：-127</p><p>所以 : v&#x3D;(-1)^S* M*2^E，此时不管S与M等于多少，最终V都是一个接近于0的数。</p><p><strong>E全为1的情况</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s: <span class="number">0</span>  E: <span class="number">11111111</span>  M: <span class="number">00000000000000000000000</span></span><br></pre></td></tr></table></figure><p>此时E是存储在内存中的，E转换成十进制是255，我们知道E存储到内存中时要加上中间值，前面已经知道了32位浮点数的中间值是127，当E为多少时，加上中间值会等于255？，答案是：128。</p><p>所以 : v&#x3D;(-1)^S* M*2^E，此时不管S与M等于多少，最终V都是一个非常大的数。</p><p><strong>E不是全为1也不是全为0的情况（正常情况）</strong>：</p><p>正常情况就不赘述了。当你看完了前面的内容，这种情况也就能自己去推算了。</p><p>现在我们在回到前面的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="number">9</span>;</span><br><span class="line">    <span class="type">float</span> *pFloat =(<span class="type">float</span>*)&amp;n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n的值为:%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为:%f\n&quot;</span>,*pFloat);</span><br><span class="line">    </span><br><span class="line">    *pFloat=<span class="number">9.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值为:%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为:%f\n&quot;</span>,*pFloat);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;思考下这段代码输出的值是什么？</span><br></pre></td></tr></table></figure><p>当面把&amp;强转成浮点型时，9&#x3D;(-1)^S* M *2^E;</p><p>S&#x3D;0、E&#x3D;00000000、M&#x3D;00000000000000000001001。</p><p>所以最后输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为:%f\n&quot;</span>,*pFloat);</span><br></pre></td></tr></table></figure><p>值为：0.000000</p><p>在当我们给*pFlota赋值9.0时；</p><p>9.0&#x3D;(-1)^S* M* 2^E；</p><p>S&#x3D;0、M&#x3D;001、E&#x3D;3，</p><p>转换成二进制:0 10000010 00100000000000000000000，再转换成十进制就等于：1091567616</p><img src="/year/06/03/%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/print.png" class title="This is an example image">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件操作</title>
    <link href="http://example.com/year/06/02/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/year/06/02/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2024-06-01T16:26:05.000Z</published>
    <updated>2024-06-01T16:32:48.643Z</updated>
    
    <content type="html"><![CDATA[<p>文件指针：</p><p>文件函数：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文件指针：&lt;/p&gt;
&lt;p&gt;文件函数：&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://example.com/year/06/01/My-New-Post/"/>
    <id>http://example.com/year/06/01/My-New-Post/</id>
    <published>2024-06-01T15:57:45.000Z</published>
    <updated>2024-06-01T16:32:48.642Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/year/06/01/hello-world/"/>
    <id>http://example.com/year/06/01/hello-world/</id>
    <published>2024-06-01T09:05:41.116Z</published>
    <updated>2024-06-01T13:38:04.999Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
